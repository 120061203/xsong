# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Convert images to WebP
        run: |
          echo "🖼️ 開始轉換圖片為 WebP 格式..."
          npm run convert:images
          echo "✅ 圖片轉換完成"
      - name: Build Astro Blog
        run: |
          cd blog-astro
          # 清除快取和舊的構建文件
          rm -rf dist node_modules/.cache
          npm install
          npm run build
          echo "✅ Astro Blog 構建完成"
      - name: Build with Next.js
        env:
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Copy 404.html
        run: cp public/404.html out/404.html
      - name: Copy Astro Blog to output
        run: |
          # 確保目標目錄存在
          mkdir -p out/blog
          
          # 複製 Blog 首頁和靜態資源
          echo "📁 複製 Astro Blog 文件..."
          cp -r public/blog/* out/blog/
          
          # 處理雙重 blog 目錄問題（由於 base: '/blog' 配置）
          if [ -d "public/blog/blog" ]; then
            echo "🔄 處理雙重 blog 目錄..."
            # 只複製文章目錄，不覆蓋 index.html
            for dir in public/blog/blog/*/; do
              if [ -d "$dir" ]; then
                dirname=$(basename "$dir")
                echo "📄 複製文章目錄: $dirname"
                cp -r "$dir" "out/blog/"
              fi
            done
            echo "✅ 文章頁面已複製到正確位置"
          fi
          
          # 清理重複的 blog 子目錄
          if [ -d "out/blog/blog" ]; then
            echo "🧹 清理重複的 blog 子目錄..."
            rm -rf out/blog/blog
          fi
          
          # 檢查部署的文件
          echo "📋 檢查部署的文件:"
          ls -la out/blog/
          
          # 檢查文章頁面是否存在

          
          # 確保 CSS 和靜態資源路徑正確
          if [ -d "out/blog/_astro" ]; then
            echo "✅ Astro 靜態資源已正確部署"
          else
            echo "❌ Astro 靜態資源缺失"
            exit 1
          fi
          
          # 檢查 index.html 是否正確
          if [ -f "out/blog/index.html" ]; then
            echo "✅ Blog 首頁文件存在"
            # 檢查是否包含我們的 Layout
            if grep -q "xsong.us" out/blog/index.html; then
              echo "✅ Blog 首頁使用自定義 Layout"
            else
              echo "❌ Blog 首頁可能使用預設 Layout"
            fi
          else
            echo "❌ Blog 首頁文件缺失"
            exit 1
          fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
