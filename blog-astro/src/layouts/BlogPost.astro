---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import Layout from './Layout.astro';
import { SITE_URL, AUTHOR_NAME } from '../consts';

type Props = CollectionEntry<'blog'>['data'] & { 
	currentSlug: string;
};

const { title, description, pubDate, updatedDate, heroImage, currentSlug } = Astro.props;

// 獲取所有文章並排序
const allPosts = await getCollection('blog').then(posts => 
	posts.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime())
);

// 找到當前文章的索引
const currentIndex = allPosts.findIndex(post => post.id.replace(/\.(md|mdx)$/, '') === currentSlug);

// 上一篇和下一篇文章
const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;

// 相關文章（排除當前文章，選擇最近的3篇）
const relatedPosts = allPosts
	.filter((_, index) => index !== currentIndex)
	.slice(0, 3);
---

<Layout title={title} description={description}>
	<div class="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex flex-col lg:flex-row gap-8">
				<!-- 主要內容區域 -->
				<div class="lg:w-3/4">
			<!-- Back to Blog -->
			<div class="mb-8">
				<a 
					href="/blog"
					class="inline-flex items-center text-blue-600 dark:text-green-400 hover:text-blue-700 dark:hover:text-green-300 font-medium transition-colors"
				>
					<svg class="mr-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
					</svg>
					返回部落格
				</a>
			</div>

			<!-- Article -->
			<article class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-200 dark:border-gray-700">
				{heroImage && (
					<div class="w-full h-64 md:h-96 overflow-hidden">
						<Image 
							width={1020} 
							height={510} 
							src={heroImage} 
							alt={title}
							class="w-full h-full object-cover"
						/>
					</div>
				)}
				
				<div class="p-8">
					<!-- Header -->
					<header class="mb-8">
						<!-- 手機版：標題和按鈕分開顯示 -->
						<div class="block md:hidden">
							<!-- 標題和複製按鈕在同一行 -->
							<div class="flex items-start justify-between mb-4">
								<h1 class="text-2xl font-bold text-gray-900 dark:text-white flex-1 min-w-0">
									{title}
								</h1>
								<!-- 複製網址按鈕 -->
								<button 
									id="copy-url-btn"
									class="flex items-center gap-1 px-2 py-1 text-xs text-gray-500 hover:text-blue-600 dark:hover:text-green-400 transition-colors duration-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 flex-shrink-0 ml-3"
									title="複製文章網址"
								>
									<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
									</svg>
									<span id="copy-text">複製</span>
								</button>
							</div>
							<!-- 日期獨占一行 -->
							<div class="flex items-center text-gray-500 dark:text-gray-400 text-sm mb-4">
								<time dateTime={pubDate.toISOString()}>
									{pubDate.toLocaleDateString('zh-TW', {
										year: 'numeric',
										month: 'long',
										day: 'numeric'
									})}
								</time>
								{updatedDate && (
									<>
										<span class="mx-2">•</span>
										<span>更新於 {updatedDate.toLocaleDateString('zh-TW', {
											year: 'numeric',
											month: 'long',
											day: 'numeric'
										})}</span>
									</>
								)}
							</div>
						</div>
						
						<!-- 桌面版：標題和按鈕並排顯示 -->
						<div class="hidden md:block">
							<div class="flex items-start justify-between">
								<div class="flex-1">
									<h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
										{title}
									</h1>
									<div class="flex items-center text-gray-500 dark:text-gray-400 text-sm">
										<time dateTime={pubDate.toISOString()}>
											{pubDate.toLocaleDateString('zh-TW', {
												year: 'numeric',
												month: 'long',
												day: 'numeric'
											})}
										</time>
										{updatedDate && (
											<>
												<span class="mx-2">•</span>
												<span>更新於 {updatedDate.toLocaleDateString('zh-TW', {
													year: 'numeric',
													month: 'long',
													day: 'numeric'
												})}</span>
											</>
										)}
									</div>
								</div>
								
								<!-- 複製網址按鈕 -->
								<button 
									id="copy-url-btn-desktop"
									class="ml-4 flex items-center gap-2 px-4 py-2 text-sm text-gray-500 hover:text-blue-600 dark:hover:text-green-400 transition-colors duration-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700"
									title="複製文章網址"
								>
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
									</svg>
									<span id="copy-text-desktop">複製網址</span>
								</button>
							</div>
						</div>
					</header>

					<!-- Content -->
					<div class="prose prose-lg max-w-none dark:prose-invert" id="article-content">
						<slot />
					</div>
				</div>
			</article>

			<!-- 上一篇/下一篇導航 -->
			{(prevPost || nextPost) && (
				<div class="mt-8 flex flex-col sm:flex-row gap-4">
					{prevPost && (
						<a 
							href={`/blog/${prevPost.id.replace(/\.(md|mdx)$/, '')}`}
							class="flex-1 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700 hover:shadow-xl transition-all duration-300 group"
						>
							<div class="flex items-center">
								<svg class="mr-3 w-5 h-5 text-gray-400 group-hover:text-blue-600 dark:group-hover:text-green-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
								</svg>
								<div>
									<div class="text-sm text-gray-500 dark:text-gray-400 mb-1">上一篇</div>
									<div class="text-lg font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-green-400 transition-colors">
										{prevPost.data.title}
									</div>
								</div>
							</div>
						</a>
					)}
					
					{nextPost && (
						<a 
							href={`/blog/${nextPost.id.replace(/\.(md|mdx)$/, '')}`}
							class="flex-1 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700 hover:shadow-xl transition-all duration-300 group"
						>
							<div class="flex items-center justify-end">
								<div class="text-right">
									<div class="text-sm text-gray-500 dark:text-gray-400 mb-1">下一篇</div>
									<div class="text-lg font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-green-400 transition-colors">
										{nextPost.data.title}
									</div>
								</div>
								<svg class="ml-3 w-5 h-5 text-gray-400 group-hover:text-blue-600 dark:group-hover:text-green-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
								</svg>
							</div>
						</a>
					)}
				</div>
			)}

			<!-- 相關文章 -->
			{relatedPosts.length > 0 && (
				<div class="mt-12">
					<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">相關文章</h2>
					<div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
						{relatedPosts.map(post => {
							const slug = post.id.replace(/\.(md|mdx)$/, '');
							return (
								<a 
									href={`/blog/${slug}`}
									class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-200 dark:border-gray-700 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 group"
								>
									{post.data.heroImage && (
										<div class="h-48 overflow-hidden">
											<Image 
												src={post.data.heroImage} 
												alt={post.data.title}
												width={400}
												height={250}
												class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
											/>
										</div>
									)}
									<div class="p-6">
										<div class="text-sm text-gray-500 dark:text-gray-400 mb-2">
											{post.data.pubDate.toLocaleDateString('zh-TW', {
												year: 'numeric',
												month: 'long',
												day: 'numeric'
											})}
										</div>
										<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-green-400 transition-colors">
											{post.data.title}
										</h3>
										<p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-2">
											{post.data.description}
										</p>
									</div>
								</a>
							);
						})}
					</div>
				</div>
			)}
				</div>

				<!-- 右側目錄導航 -->
				<div class="lg:w-1/4">
					<div class="sticky top-24">
						<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">目錄</h3>
							<nav id="table-of-contents" class="space-y-2">
								<!-- 目錄項目將由 JavaScript 動態生成 -->
							</nav>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- 結構化數據 -->
	<script type="application/ld+json" set:html={JSON.stringify({
		"@context": "https://schema.org",
		"@type": "BlogPosting",
		"headline": title,
		"description": description,
		"url": `${SITE_URL}/blog/${currentSlug}/`,
		"datePublished": pubDate.toISOString(),
		"dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
		"author": {
			"@type": "Person",
			"name": AUTHOR_NAME,
			"url": SITE_URL
		},
		"publisher": {
			"@type": "Organization",
			"name": "xsong.us",
			"url": SITE_URL,
			"logo": {
				"@type": "ImageObject",
				"url": `${SITE_URL}/avatar.png`
			}
		},
		"mainEntityOfPage": {
			"@type": "WebPage",
			"@id": `${SITE_URL}/blog/${currentSlug}/`
		},
		...(heroImage && {
			"image": {
				"@type": "ImageObject",
				"url": new URL(heroImage.src, SITE_URL).toString(),
				"width": 1200,
				"height": 630
			}
		})
	})} />

	<script>
		// 複製網址功能
		function initCopyUrl() {
			// 處理手機版按鈕
			const copyBtn = document.getElementById('copy-url-btn');
			const copyText = document.getElementById('copy-text');
			
			// 處理桌面版按鈕
			const copyBtnDesktop = document.getElementById('copy-url-btn-desktop');
			const copyTextDesktop = document.getElementById('copy-text-desktop');
			
			// 複製功能函數
			async function copyUrl(btn, textElement) {
				if (!btn || !textElement) return;
				
				try {
					await navigator.clipboard.writeText(window.location.href);
					
					// 顯示成功提示
					const originalIcon = btn.querySelector('svg').outerHTML;
					const originalText = textElement.textContent;
					
					// 根據按鈕類型設置正確的 SVG 尺寸
					const isMobile = btn.id === 'copy-url-btn';
					const svgSize = isMobile ? 'w-3 h-3' : 'w-4 h-4';
					
					btn.querySelector('svg').outerHTML = `
						<svg class="${svgSize}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
						</svg>
					`;
					textElement.textContent = '已複製！';
					btn.classList.add('text-green-600', 'dark:text-green-400');
					btn.classList.remove('text-gray-500');
					
					// 2秒後恢復原狀
					setTimeout(() => {
						btn.querySelector('svg').outerHTML = originalIcon;
						textElement.textContent = originalText;
						// 移除所有可能的綠色類
						btn.classList.remove('text-green-600', 'dark:text-green-400');
						// 強制恢復原始灰色，移除任何其他顏色類
						btn.className = btn.className.replace(/text-\w+-\d+/g, '');
						btn.classList.add('text-gray-500');
					}, 2000);
					
				} catch (err) {
					// 降級方案：使用舊的複製方法
					const textArea = document.createElement('textarea');
					textArea.value = window.location.href;
					document.body.appendChild(textArea);
					textArea.select();
					document.execCommand('copy');
					document.body.removeChild(textArea);
					
					// 顯示成功提示
					const originalIcon = btn.querySelector('svg').outerHTML;
					const originalText = textElement.textContent;
					
					// 根據按鈕類型設置正確的 SVG 尺寸
					const isMobile = btn.id === 'copy-url-btn';
					const svgSize = isMobile ? 'w-3 h-3' : 'w-4 h-4';
					
					btn.querySelector('svg').outerHTML = `
						<svg class="${svgSize}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
						</svg>
					`;
					textElement.textContent = '已複製！';
					btn.classList.add('text-green-600', 'dark:text-green-400');
					btn.classList.remove('text-gray-500');
					
					setTimeout(() => {
						btn.querySelector('svg').outerHTML = originalIcon;
						textElement.textContent = originalText;
						// 移除所有可能的綠色類
						btn.classList.remove('text-green-600', 'dark:text-green-400');
						// 強制恢復原始灰色，移除任何其他顏色類
						btn.className = btn.className.replace(/text-\w+-\d+/g, '');
						btn.classList.add('text-gray-500');
					}, 2000);
				}
			}
			
			// 為兩個按鈕添加事件監聽器
			if (copyBtn && copyText) {
				copyBtn.addEventListener('click', () => copyUrl(copyBtn, copyText));
			}
			
			if (copyBtnDesktop && copyTextDesktop) {
				copyBtnDesktop.addEventListener('click', () => copyUrl(copyBtnDesktop, copyTextDesktop));
			}
		}

		// 目錄導航功能
		function initTableOfContents() {
			const articleContent = document.getElementById('article-content');
			const tocContainer = document.getElementById('table-of-contents');
			
			if (!articleContent || !tocContainer) return;
			
			// 獲取所有標題
			const headings = articleContent.querySelectorAll('h1, h2, h3, h4');
			const tocItems = [];
			
			headings.forEach((heading, index) => {
				// 為標題添加 ID
				const id = `heading-${index}`;
				heading.id = id;
				
				// 創建目錄項目
				const tocItem = document.createElement('a');
				tocItem.href = `#${id}`;
				tocItem.textContent = heading.textContent;
				tocItem.className = 'block text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-green-400 transition-colors py-1 px-2 rounded cursor-pointer';
				
				// 添加點擊事件，實現平滑滾動
				tocItem.addEventListener('click', (e) => {
					e.preventDefault();
					const targetHeading = document.getElementById(id);
					if (targetHeading) {
						targetHeading.scrollIntoView({
							behavior: 'smooth',
							block: 'start'
						});
					}
				});
				
				// 根據標題層級添加縮進
				const level = parseInt(heading.tagName.charAt(1));
				tocItem.style.paddingLeft = `${(level - 1) * 12 + 8}px`;
				
				tocContainer.appendChild(tocItem);
				tocItems.push({ element: tocItem, id: id });
			});
			
			// 滾動監聽器
			function updateActiveTocItem() {
				const scrollPosition = window.scrollY;
				const windowHeight = window.innerHeight;
				
				let activeId = null;
				let minDistance = Infinity;
				
				headings.forEach((heading) => {
					const rect = heading.getBoundingClientRect();
					const distance = Math.abs(rect.top);
					
					// 找到距離視窗頂部最近的標題
					if (distance < minDistance && rect.top <= 150) {
						minDistance = distance;
						activeId = heading.id;
					}
				});
				
				// 如果沒有找到合適的標題，選擇第一個
				if (!activeId && headings.length > 0) {
					activeId = headings[0].id;
				}
				
				// 更新活動狀態
				tocItems.forEach(({ element, id }) => {
					if (id === activeId) {
						element.classList.add('text-blue-600', 'dark:text-green-400', 'bg-blue-50', 'dark:bg-green-900/20', 'font-medium');
						element.classList.remove('text-gray-600', 'dark:text-gray-400');
					} else {
						element.classList.remove('text-blue-600', 'dark:text-green-400', 'bg-blue-50', 'dark:bg-green-900/20', 'font-medium');
						element.classList.add('text-gray-600', 'dark:text-gray-400');
					}
				});
			}
			
			// 添加滾動監聽器
			window.addEventListener('scroll', updateActiveTocItem);
			updateActiveTocItem(); // 初始化
		}
		
		// 頁面載入完成後初始化
		document.addEventListener('DOMContentLoaded', () => {
			initCopyUrl();
			initTableOfContents();
		});
	</script>
</Layout>
